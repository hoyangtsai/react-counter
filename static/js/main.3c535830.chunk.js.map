{"version":3,"sources":["Couter.js","App.js","reportWebVitals.js","index.js"],"names":["reducer","state","count","action","type","Counter","useState","undefined","setState","dispatch","prevState","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAGMA,EAAU,WAAmC,IAAlCC,EAAiC,uDAAzB,CAAEC,MAAO,GAAKC,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAAK,YACH,MAAO,CAAEF,MAAOD,EAAMC,MAAQ,GAChC,IAAK,YACH,MAAO,CAAEA,MAAOD,EAAMC,MAAQ,GAChC,QACE,OAAOD,IAyCEI,EA1BC,WAAM,MAGMC,mBAASN,OAAQO,EAAW,KAHlC,mBAGbN,EAHa,KAGNO,EAHM,KAKdC,EAAW,SAACN,GAChBK,GAAS,SAAAE,GAAS,OAAIV,EAAQU,EAAWP,OAW3C,OACE,gCACE,8BAAMF,EAAMC,QACZ,wBAAQS,QAXM,WAChBF,EAAS,CAAEL,KAAM,eAUf,eACA,wBAAQO,QARM,WAChBF,EAAS,CAAEL,KAAM,eAOf,mBCnCSQ,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3c535830.chunk.js","sourcesContent":["\nimport { useState } from 'react';\n\nconst reducer = (state = { count: 0 }, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1};\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return { count: state.count + 1 };\n//     case 'decrement':\n//       return { count: state.count - 1 };\n//     default:\n//       throw new Error();\n//   }\n// }\n\nconst Counter = () => {\n  // const [state, dispatch] = useReducer(reducer, initialState);\n\n  const [state, setState] = useState(reducer(undefined, {}));\n\n  const dispatch = (action) => {\n    setState(prevState => reducer(prevState, action));\n  }\n\n  const increment = () => {\n    dispatch({ type: 'INCREMENT' });\n  };\n\n  const decrement = () => {\n    dispatch({ type: 'DECREMENT' });\n  };\n\n  return (\n    <div>\n      <div>{state.count}</div>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n}\n\nexport default Counter;","import './App.css';\nimport Counter from './Couter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}